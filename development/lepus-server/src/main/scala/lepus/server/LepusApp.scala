/** This file is part of the Lepus Framework. For the full copyright and license information, please view the LICENSE
  * file that was distributed with this source code.
  */

package lepus.server

import scala.concurrent.ExecutionContext

import cats.Applicative
import cats.data.NonEmptyList

import org.http4s.{ Status, Response }
import org.http4s.server.middleware.CORSPolicy

import com.zaxxer.hikari.HikariDataSource

import lepus.router.Routing
import lepus.database.{ DataSource, DatabaseConfig }

/** A model for providing server configuration information. Only one must be generated by the application.
  *
  * For example:
  * {{{
  *  object HttpApp extends LepusApp[IO]:
  *    override def routes = NonEmptyList.of(
  *      "world" / country ->> RouterConstructor.of {
  *        case GET => WorldController.get
  *      }
  *    )
  * }}}
  *
  * @tparam F
  *   the effect type.
  */
trait LepusApp[F[_]: Applicative]:

  // ----- [ Database setups ] -----
  /** List of all databases to be launched by the application */
  val databases: Set[DatabaseConfig] = Set.empty

  // ----- [ Router Setups ] -----
  /** CORS settings applied to all endpoints */
  val cors: Option[CORSPolicy] = None

  /** List of all endpoints to be launched by the application */
  val routes: Map[DataSource, (ExecutionContext, HikariDataSource)] ?=> NonEmptyList[Routing[F]]

  /** Methods to define handling of errors that occur during application execution */
  val errorHandler: PartialFunction[Throwable, F[Response[F]]] =
    case _ => Applicative[F].pure(Response(Status.InternalServerError))
