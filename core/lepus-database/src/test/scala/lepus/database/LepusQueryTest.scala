/** This file is part of the Lepus Framework. For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

package lepus.database

import org.specs2.mutable.Specification

import lepus.core.format.Naming.SNAKE

import lepus.core.generic.Schema
import lepus.core.generic.semiauto.*

object LepusQueryTest extends Specification:

  import LepusQuery.*

  "Testing the LepusQuery" should {

    "The query generated by the select method matches the specified query" in {
      select("test", "param1", "param2").sql === "SELECT param1,param2 FROM test "
    }

    "The query generated by the select method using Schema matches the specified query" in {
      case class Test(param1: String, param2: String)
      given Schema[Test] = deriveSchemer[Test]

      select[Test]("test").sql === "SELECT param1, param2 FROM test "
    }

    "The query generated by the select method using Schema and Naming matches the specified query" in {
      case class Test(camelCase: String, PascalCase: String, snake_case: String, `kebab-case`: String)
      given Schema[Test] = deriveSchemer[Test]

      select[Test]("test", SNAKE).sql === "SELECT camel_case, pascal_case, snake_case, kebab_case FROM test "
    }

    "The query generated by the Select class matches the specified query" in {
      Select(fr"SELECT param1,param2 FROM test").sql === "SELECT param1,param2 FROM test "
    }

    "The query generated by the where method of the Select class matches the query you made" in {
      Select(fr"SELECT param1,param2 FROM test").where(fr"param1=param1").sql === "SELECT param1,param2 FROM test WHERE param1=param1 "
    }

    "The query generated by the limit method of the Select class matches the query you made" in {
      Select(fr"SELECT param1,param2 FROM test").limit(10).sql === "SELECT param1,param2 FROM test LIMIT 10 "
    }

    "Passing a negative value to the limit method of the Select class raises an IllegalArgumentException exception" in {
      Select(fr"SELECT param1,param2 FROM test").limit(-1) must throwAn[IllegalArgumentException]
    }

    "The query generated by the insert method matches the specified query" in {
      insert("test", "param1", "param2").sql === "INSERT INTO test ( param1,param2 ) "
    }

    "The query generated by the insert method using Schema matches the specified query" in {
      case class Test(param1: String, param2: String)
      given Schema[Test] = deriveSchemer[Test]

      insert[Test]("test").sql === "INSERT INTO test ( param1, param2 ) "
    }

    "The query generated by the insert method using Schema and Naming matches the specified query" in {
      case class Test(camelCase: String, PascalCase: String, snake_case: String, `kebab-case`: String)
      given Schema[Test] = deriveSchemer[Test]

      insert[Test]("test", SNAKE).sql === "INSERT INTO test ( camel_case, pascal_case, snake_case, kebab_case ) "
    }

    "The query generated by the Insert class matches the specified query" in {
      Insert(fr"INSERT INTO test ( param1, param2 )").sql === "INSERT INTO test ( param1, param2 ) "
    }

    "The query generated by the values method of the Insert class matches the query you made" in {
      Insert(fr"INSERT INTO test ( param1, param2 )").values(fr"param1, param2").sql === "INSERT INTO test ( param1, param2 ) VALUES ( param1, param2 ) "
    }

    "The query generated by the update method matches the specified query" in {
      update("test", fr"param1=param1").sql === "UPDATE test SET param1=param1 "
    }

    "The query generated by the Update class matches the specified query" in {
      Update(fr"UPDATE test SET param1=param1").sql === "UPDATE test SET param1=param1 "
    }

    "The query generated by the where method of the Update class matches the query you made" in {
      Update(fr"UPDATE test SET param1=param1").where(fr"param1=param1").sql === "UPDATE test SET param1=param1 WHERE param1=param1 "
    }

    "The query generated by the delete method matches the specified query" in {
      delete("test").sql === "DELETE FROM test "
    }

    "The query generated by the Delete class matches the specified query" in {
      Delete(fr"DELETE FROM test").sql === "DELETE FROM test "
    }

    "The query generated by the where method of the Delete class matches the query you made" in {
      Delete(fr"DELETE FROM test").where(fr"param1=param1").sql === "DELETE FROM test WHERE param1=param1 "
    }

    "The query generated by the Where class matches the specified query" in {
      Where(fr"WHERE param1=param1").sql === "WHERE param1=param1 "
    }

    "The query generated by the and method of the Where class matches the query you made" in {
      Where(fr"WHERE param1=param1").and(fr"param2=param2").sql === "WHERE param1=param1 AND param2=param2 "
    }

    "The query generated by the or method of the Where class matches the query you made" in {
      Where(fr"WHERE param1=param1").or(fr"param2=param2").sql === "WHERE param1=param1 OR param2=param2 "
    }

    "The query generated by the limit method of the Where class matches the query you made" in {
      Where(fr"WHERE param1=param1").limit(1).sql === "WHERE param1=param1 LIMIT 1 "
    }

    "Passing a negative value to the limit method of the Where class raises an IllegalArgumentException exception" in {
      Where(fr"WHERE param1=param1").limit(-1) must throwAn[IllegalArgumentException]
    }
  }
