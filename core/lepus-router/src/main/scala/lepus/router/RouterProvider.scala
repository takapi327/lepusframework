/** This file is part of the Lepus Framework. For the full copyright and license information, please view the LICENSE
  * file that was distributed with this source code.
  */

package lepus.router

import cats.data.NonEmptyList

import lepus.router.model.Tag

/** A model for providing routing information to the server. Only one must be generated by the application.
  *
  * For example:
  * {{{
  *  object HttpApp extends RouterProvider[IO]:
  *    override def routes = combine(
  *      "hello" / name -> HelloRoute,
  *      "world" / country -> WorldRoute
  *    )
  * }}}
  *
  * @tparam F
  *   the effect type.
  */
trait RouterProvider[F[_]]:

  /** Tag of this endpoint, used during Swagger (Open API) document generation. */
  def tags: Set[Tag] = Set.empty[Tag]

  def routes: NonEmptyList[Route[F]]

  /** Combine routing into a single array for use in the application.
    *
    * @param route
    *   Receive all combinations of Endpoints and Routers used in the application.
    */
  def combine(route: Route[F]*): NonEmptyList[Route[F]] =
    require(route.nonEmpty, "There must always be at least one Route.")
    NonEmptyList.fromListUnsafe(route.toList)
