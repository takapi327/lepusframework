/** This file is part of the Lepus Framework. For the full copyright and license information, please view the LICENSE
  * file that was distributed with this source code.
  */

package lepus.logback

import ch.qos.logback.classic.spi.ILoggingEvent

import ch.qos.logback.core.CoreConstants

import java.util

/** Outputs logs generated by the system and applications in Json format. Configure logback.groovy, logback-test.xml, or
  * logback.xml on the application classpath as follows
  *
  * For example:
  * {{{
  *   <configuration>
  *     <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
  *       <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
  *         <layout class="lepus.logback.LogbackJsonEncoder" />
  *       </encoder>
  *     </appender>
  *
  *     <root level="INFO">
  *       <appender-ref ref="STDOUT" />
  *     </root>
  *   </<configuration>
  * }}}
  */
class LogbackJsonEncoder extends BaseEncoder {
  override def doLayout(event: ILoggingEvent): String = {
    val sbuf: StringBuffer                 = new StringBuffer(128)
    val map:  util.HashMap[String, String] = new util.HashMap()
    map.put("timeStamp", timeStampToLocalDateTime(event.getTimeStamp).toString)
    map.put("level", colorLevel(event))
    map.put("maker", event.getMarker.toString)
    map.put("thread", event.getThreadName)
    map.put("message", event.getMessage)
    map.put("class", event.getClass.toString)
    map.put("argument", event.getArgumentArray.mkString("Array(", ", ", ")"))
    map.put("callerData", event.getCallerData.mkString("Array(", ", ", ")"))
    map.put("loggerContextVO", event.getLoggerContextVO.toString)
    map.put("formattedMessage", event.getFormattedMessage)
    map.put("mdcPropertyMap", event.getMDCPropertyMap.toString)
    map.put("loggerName", event.getLoggerName)
    map.put("coreConstants", CoreConstants.LINE_SEPARATOR)

    sbuf.append("{ ")
    map.forEach((key, value) => {
      sbuf.append(s"$key: $value,")
    })
    sbuf.append(" }")
    sbuf.toString
  }
}
