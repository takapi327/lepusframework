/** This file is part of the Lepus Framework. For the full copyright and license information, please view the LICENSE
  * file that was distributed with this source code.
  */

package lepus.app.session

import cats.effect.IO
import cats.effect.std.SecureRandom
import cats.effect.unsafe.implicits.global

import org.http4s.*

import org.specs2.mutable.Specification

object SessionIdentifierTest extends Specification:

  def buildRequest(content: String): Request[IO] = Request().addCookie("LEPUS_SESSION", content)

  "Testing the SessionIdentifier" should {
    "SessionIdentifier can be generated based on the value retrieved from the cookie, and the generated value matches the specified value." in {
      val id = SessionIdentifier
        .extract(
          request               = buildRequest("hd8r98ilA2rf0rzvqsjsevs0KHMg2VgOse1GNuaCGSM="),
          sessionIdentifierName = "LEPUS_SESSION"
        )

      id.isDefined and id.get === SessionIdentifier("hd8r98ilA2rf0rzvqsjsevs0KHMg2VgOse1GNuaCGSM=")
    }

    "The value generated by the create method of the SessionIdentifier can be regenerated from the cookie of the request." in {
      val request: IO[Request[IO]] =
        for
          random <- SecureRandom.javaSecuritySecureRandom[IO](4)
          id     <- SessionIdentifier.create[IO](random, 32)
        yield buildRequest(id.value)

      SessionIdentifier
        .extract(request.unsafeRunSync(), "LEPUS_SESSION")
        .isDefined
    }

    "If the key specified in the cookie does not exist, it is set to None." in {
      val id = SessionIdentifier
        .extract(
          request               = buildRequest("hd8r98ilA2rf0rzvqsjsevs0KHMg2VgOse1GNuaCGSM="),
          sessionIdentifierName = "LEPUS_SESSION_NONE"
        )

      id.isEmpty
    }
  }
